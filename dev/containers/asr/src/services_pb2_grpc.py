# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import messages_pb2 as messages__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FunctionInstanceStub(object):
    """API exposed by the nodes / orchestrator to manage the lifecycle of function instances.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/edgeless_api.FunctionInstance/Start',
                request_serializer=messages__pb2.SpawnFunctionRequest.SerializeToString,
                response_deserializer=messages__pb2.StartComponentResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/edgeless_api.FunctionInstance/Stop',
                request_serializer=messages__pb2.InstanceIdVariant.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Patch = channel.unary_unary(
                '/edgeless_api.FunctionInstance/Patch',
                request_serializer=messages__pb2.PatchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class FunctionInstanceServicer(object):
    """API exposed by the nodes / orchestrator to manage the lifecycle of function instances.
    """

    def Start(self, request, context):
        """Start a new function instance.
        Input: request containing the description of the function to create.
        Output: the function instance identifier assigned, if accepted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Stop a running function instance.
        Input: the identifier of the function instance to tear down.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Patch(self, request, context):
        """Patch functions by updating for a given function identifier the
        mapping from the channel to a list of functions/resources to which events
        should be directed.
        Input: the updated mapping.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FunctionInstanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=messages__pb2.SpawnFunctionRequest.FromString,
                    response_serializer=messages__pb2.StartComponentResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=messages__pb2.InstanceIdVariant.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Patch': grpc.unary_unary_rpc_method_handler(
                    servicer.Patch,
                    request_deserializer=messages__pb2.PatchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.FunctionInstance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.FunctionInstance', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FunctionInstance(object):
    """API exposed by the nodes / orchestrator to manage the lifecycle of function instances.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.FunctionInstance/Start',
            messages__pb2.SpawnFunctionRequest.SerializeToString,
            messages__pb2.StartComponentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.FunctionInstance/Stop',
            messages__pb2.InstanceIdVariant.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Patch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.FunctionInstance/Patch',
            messages__pb2.PatchRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeManagementStub(object):
    """API for per-node management functionality
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdatePeers = channel.unary_unary(
                '/edgeless_api.NodeManagement/UpdatePeers',
                request_serializer=messages__pb2.UpdatePeersRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/edgeless_api.NodeManagement/Reset',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class NodeManagementServicer(object):
    """API for per-node management functionality
    """

    def UpdatePeers(self, request, context):
        """Update the dataplane of a node by adding/removing peers.
        Input: the node identifier and invocation URL (only for add operations).
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Reset the node to a clean state.
        Input: none.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdatePeers': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePeers,
                    request_deserializer=messages__pb2.UpdatePeersRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.NodeManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.NodeManagement', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeManagement(object):
    """API for per-node management functionality
    """

    @staticmethod
    def UpdatePeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.NodeManagement/UpdatePeers',
            messages__pb2.UpdatePeersRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.NodeManagement/Reset',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeRegistrationStub(object):
    """API that allows nodes to register themselves with the orchestrator.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateNode = channel.unary_unary(
                '/edgeless_api.NodeRegistration/UpdateNode',
                request_serializer=messages__pb2.UpdateNodeRequest.SerializeToString,
                response_deserializer=messages__pb2.UpdateNodeResponse.FromString,
                _registered_method=True)


class NodeRegistrationServicer(object):
    """API that allows nodes to register themselves with the orchestrator.
    """

    def UpdateNode(self, request, context):
        """Notify that the node is alive (also acts as registration).
        Input: registration: identifier of the new node and agent/invocation
        URLs, health status information, and performance samples.
        deregistration: identifier of the existing node to be deregistered.
        Output: UpdateNodeResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeRegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateNode': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNode,
                    request_deserializer=messages__pb2.UpdateNodeRequest.FromString,
                    response_serializer=messages__pb2.UpdateNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.NodeRegistration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.NodeRegistration', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeRegistration(object):
    """API that allows nodes to register themselves with the orchestrator.
    """

    @staticmethod
    def UpdateNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.NodeRegistration/UpdateNode',
            messages__pb2.UpdateNodeRequest.SerializeToString,
            messages__pb2.UpdateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DomainRegistrationStub(object):
    """API that allows the orchestrators to register with the controller.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateDomain = channel.unary_unary(
                '/edgeless_api.DomainRegistration/UpdateDomain',
                request_serializer=messages__pb2.UpdateDomainRequest.SerializeToString,
                response_deserializer=messages__pb2.UpdateDomainResponse.FromString,
                _registered_method=True)


class DomainRegistrationServicer(object):
    """API that allows the orchestrators to register with the controller.
    """

    def UpdateDomain(self, request, context):
        """Register a new orchestration domain on a controller.
        Input: registration data, including a deadline by which the orchestration
        domain can be considered offline; to disconnect a domain, use a value in
        the past for this deadline
        Output: UpdateDomainResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DomainRegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDomain,
                    request_deserializer=messages__pb2.UpdateDomainRequest.FromString,
                    response_serializer=messages__pb2.UpdateDomainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.DomainRegistration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.DomainRegistration', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DomainRegistration(object):
    """API that allows the orchestrators to register with the controller.
    """

    @staticmethod
    def UpdateDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.DomainRegistration/UpdateDomain',
            messages__pb2.UpdateDomainRequest.SerializeToString,
            messages__pb2.UpdateDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkflowInstanceStub(object):
    """API to manage the lifecycle of workflow instances.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/edgeless_api.WorkflowInstance/Start',
                request_serializer=messages__pb2.SpawnWorkflowRequest.SerializeToString,
                response_deserializer=messages__pb2.SpawnWorkflowResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/edgeless_api.WorkflowInstance/Stop',
                request_serializer=messages__pb2.WorkflowId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.List = channel.unary_unary(
                '/edgeless_api.WorkflowInstance/List',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=messages__pb2.WorkflowIdList.FromString,
                _registered_method=True)
        self.Inspect = channel.unary_unary(
                '/edgeless_api.WorkflowInstance/Inspect',
                request_serializer=messages__pb2.WorkflowId.SerializeToString,
                response_deserializer=messages__pb2.WorkflowInstanceInfo.FromString,
                _registered_method=True)
        self.Domains = channel.unary_unary(
                '/edgeless_api.WorkflowInstance/Domains',
                request_serializer=messages__pb2.DomainId.SerializeToString,
                response_deserializer=messages__pb2.DomainCapabilitiesList.FromString,
                _registered_method=True)


class WorkflowInstanceServicer(object):
    """API to manage the lifecycle of workflow instances.
    """

    def Start(self, request, context):
        """Start a new workflow.
        Input: request containing the description of the workflow to create.
        Output: the status of workflow instance newly created, if accepted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Stop an active workflow.
        Input: the identifier of the workflow to tear down.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """List the known workflow identifiers.
        Input: none.
        Output: the list of workflow identifiers..
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inspect(self, request, context):
        """Inspect a given workflow.
        Input: the identifier of the workflow to inspect.
        Output: information about the workflow identifiers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Domains(self, request, context):
        """List the domain capabilities.
        Input: the identifier of the domain or an empty value to query all.
        Output: the list of capabilities of the known domains.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowInstanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=messages__pb2.SpawnWorkflowRequest.FromString,
                    response_serializer=messages__pb2.SpawnWorkflowResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=messages__pb2.WorkflowId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=messages__pb2.WorkflowIdList.SerializeToString,
            ),
            'Inspect': grpc.unary_unary_rpc_method_handler(
                    servicer.Inspect,
                    request_deserializer=messages__pb2.WorkflowId.FromString,
                    response_serializer=messages__pb2.WorkflowInstanceInfo.SerializeToString,
            ),
            'Domains': grpc.unary_unary_rpc_method_handler(
                    servicer.Domains,
                    request_deserializer=messages__pb2.DomainId.FromString,
                    response_serializer=messages__pb2.DomainCapabilitiesList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.WorkflowInstance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.WorkflowInstance', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkflowInstance(object):
    """API to manage the lifecycle of workflow instances.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.WorkflowInstance/Start',
            messages__pb2.SpawnWorkflowRequest.SerializeToString,
            messages__pb2.SpawnWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.WorkflowInstance/Stop',
            messages__pb2.WorkflowId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.WorkflowInstance/List',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            messages__pb2.WorkflowIdList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Inspect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.WorkflowInstance/Inspect',
            messages__pb2.WorkflowId.SerializeToString,
            messages__pb2.WorkflowInstanceInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Domains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.WorkflowInstance/Domains',
            messages__pb2.DomainId.SerializeToString,
            messages__pb2.DomainCapabilitiesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FunctionInvocationStub(object):
    """API to handle events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Handle = channel.unary_unary(
                '/edgeless_api.FunctionInvocation/Handle',
                request_serializer=messages__pb2.Event.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class FunctionInvocationServicer(object):
    """API to handle events.
    """

    def Handle(self, request, context):
        """Handle an event.
        Input: event to be handled.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FunctionInvocationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Handle': grpc.unary_unary_rpc_method_handler(
                    servicer.Handle,
                    request_deserializer=messages__pb2.Event.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.FunctionInvocation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.FunctionInvocation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FunctionInvocation(object):
    """API to handle events.
    """

    @staticmethod
    def Handle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.FunctionInvocation/Handle',
            messages__pb2.Event.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ResourceConfigurationStub(object):
    """API to handle the lifecycle of resources.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/edgeless_api.ResourceConfiguration/Start',
                request_serializer=messages__pb2.ResourceInstanceSpecification.SerializeToString,
                response_deserializer=messages__pb2.StartComponentResponse.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/edgeless_api.ResourceConfiguration/Stop',
                request_serializer=messages__pb2.InstanceIdVariant.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Patch = channel.unary_unary(
                '/edgeless_api.ResourceConfiguration/Patch',
                request_serializer=messages__pb2.PatchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ResourceConfigurationServicer(object):
    """API to handle the lifecycle of resources.
    """

    def Start(self, request, context):
        """Create a new resource.
        Input: specification of the resource to be created.
        Output: the identifier of the newly created resource, if accepted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Terminate an existing resource.
        Input: the identifier of the resource to be terminated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Patch(self, request, context):
        """Patch resources by updating for a given identifier the
        mapping from the channel to a list of functions/resources to which events
        should be directed.
        Input: the updated mapping.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceConfigurationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=messages__pb2.ResourceInstanceSpecification.FromString,
                    response_serializer=messages__pb2.StartComponentResponse.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=messages__pb2.InstanceIdVariant.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Patch': grpc.unary_unary_rpc_method_handler(
                    servicer.Patch,
                    request_deserializer=messages__pb2.PatchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.ResourceConfiguration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.ResourceConfiguration', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ResourceConfiguration(object):
    """API to handle the lifecycle of resources.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.ResourceConfiguration/Start',
            messages__pb2.ResourceInstanceSpecification.SerializeToString,
            messages__pb2.StartComponentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.ResourceConfiguration/Stop',
            messages__pb2.InstanceIdVariant.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Patch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.ResourceConfiguration/Patch',
            messages__pb2.PatchRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GuestAPIFunctionStub(object):
    """API exposed by a function to manage the lifecycle and run-time of a function instance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Boot = channel.unary_unary(
                '/edgeless_api.GuestAPIFunction/Boot',
                request_serializer=messages__pb2.BootData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Init = channel.unary_unary(
                '/edgeless_api.GuestAPIFunction/Init',
                request_serializer=messages__pb2.FunctionInstanceInit.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Cast = channel.unary_unary(
                '/edgeless_api.GuestAPIFunction/Cast',
                request_serializer=messages__pb2.InputEventData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Call = channel.unary_unary(
                '/edgeless_api.GuestAPIFunction/Call',
                request_serializer=messages__pb2.InputEventData.SerializeToString,
                response_deserializer=messages__pb2.CallReturn.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/edgeless_api.GuestAPIFunction/Stop',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class GuestAPIFunctionServicer(object):
    """API exposed by a function to manage the lifecycle and run-time of a function instance.
    """

    def Boot(self, request, context):
        """Create the function instance.
        Input: the end-point of the GuestAPIHost.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Init(self, request, context):
        """Initialize the function instance.
        Input: the payload and saved state of the function instance.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cast(self, request, context):
        """Invoke the function instance (asynchronous).
        Input: the source instance identifier and function arguments.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Call(self, request, context):
        """Invoke the function instance and wait for a return.
        Input: the source instance identifier and function arguments.
        Output: the return value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Clean up the function instance before termination.
        Input: none.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuestAPIFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Boot': grpc.unary_unary_rpc_method_handler(
                    servicer.Boot,
                    request_deserializer=messages__pb2.BootData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=messages__pb2.FunctionInstanceInit.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Cast': grpc.unary_unary_rpc_method_handler(
                    servicer.Cast,
                    request_deserializer=messages__pb2.InputEventData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=messages__pb2.InputEventData.FromString,
                    response_serializer=messages__pb2.CallReturn.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.GuestAPIFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.GuestAPIFunction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GuestAPIFunction(object):
    """API exposed by a function to manage the lifecycle and run-time of a function instance.
    """

    @staticmethod
    def Boot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIFunction/Boot',
            messages__pb2.BootData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIFunction/Init',
            messages__pb2.FunctionInstanceInit.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Cast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIFunction/Cast',
            messages__pb2.InputEventData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIFunction/Call',
            messages__pb2.InputEventData.SerializeToString,
            messages__pb2.CallReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIFunction/Stop',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GuestAPIHostStub(object):
    """API exposed by a node towards a function instance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Cast = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/Cast',
                request_serializer=messages__pb2.OutputEventData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CastRaw = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/CastRaw',
                request_serializer=messages__pb2.OutputEventDataRaw.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Call = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/Call',
                request_serializer=messages__pb2.OutputEventData.SerializeToString,
                response_deserializer=messages__pb2.CallReturn.FromString,
                _registered_method=True)
        self.CallRaw = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/CallRaw',
                request_serializer=messages__pb2.OutputEventDataRaw.SerializeToString,
                response_deserializer=messages__pb2.CallReturn.FromString,
                _registered_method=True)
        self.TelemetryLog = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/TelemetryLog',
                request_serializer=messages__pb2.TelemetryLogEvent.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Slf = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/Slf',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=messages__pb2.InstanceId.FromString,
                _registered_method=True)
        self.DelayedCast = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/DelayedCast',
                request_serializer=messages__pb2.DelayedEventData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Sync = channel.unary_unary(
                '/edgeless_api.GuestAPIHost/Sync',
                request_serializer=messages__pb2.SyncData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class GuestAPIHostServicer(object):
    """API exposed by a node towards a function instance.
    """

    def Cast(self, request, context):
        """Generate an asynchronous event.
        Input: the destination (alias) and payload of the event generated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CastRaw(self, request, context):
        """Generate an asynchronous event on a specific function instance.
        Input: the destination and payload of the event generated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Call(self, request, context):
        """Generate a synchronous event for which a return is expected.
        Input: the destination (alias) and payload of the event generated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallRaw(self, request, context):
        """Generate a synchronous event for which a return is expected on a specific function instance.
        Input: the destination and payload of the event generated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TelemetryLog(self, request, context):
        """Generate a telemetry log event.
        Input: the log data.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Slf(self, request, context):
        """Return the identifier of the current function instance.
        Input: none.
        Output: the function instance identifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelayedCast(self, request, context):
        """Generate an asynchronous event at a later time.
        Input: the delay, destination (alias) and payload of the event generated.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sync(self, request, context):
        """Synchronize distributed state.
        Input: the state to be synchronized.
        Output: none.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuestAPIHostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Cast': grpc.unary_unary_rpc_method_handler(
                    servicer.Cast,
                    request_deserializer=messages__pb2.OutputEventData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CastRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.CastRaw,
                    request_deserializer=messages__pb2.OutputEventDataRaw.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=messages__pb2.OutputEventData.FromString,
                    response_serializer=messages__pb2.CallReturn.SerializeToString,
            ),
            'CallRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.CallRaw,
                    request_deserializer=messages__pb2.OutputEventDataRaw.FromString,
                    response_serializer=messages__pb2.CallReturn.SerializeToString,
            ),
            'TelemetryLog': grpc.unary_unary_rpc_method_handler(
                    servicer.TelemetryLog,
                    request_deserializer=messages__pb2.TelemetryLogEvent.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Slf': grpc.unary_unary_rpc_method_handler(
                    servicer.Slf,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=messages__pb2.InstanceId.SerializeToString,
            ),
            'DelayedCast': grpc.unary_unary_rpc_method_handler(
                    servicer.DelayedCast,
                    request_deserializer=messages__pb2.DelayedEventData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Sync': grpc.unary_unary_rpc_method_handler(
                    servicer.Sync,
                    request_deserializer=messages__pb2.SyncData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edgeless_api.GuestAPIHost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edgeless_api.GuestAPIHost', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GuestAPIHost(object):
    """API exposed by a node towards a function instance.
    """

    @staticmethod
    def Cast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/Cast',
            messages__pb2.OutputEventData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CastRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/CastRaw',
            messages__pb2.OutputEventDataRaw.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/Call',
            messages__pb2.OutputEventData.SerializeToString,
            messages__pb2.CallReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CallRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/CallRaw',
            messages__pb2.OutputEventDataRaw.SerializeToString,
            messages__pb2.CallReturn.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TelemetryLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/TelemetryLog',
            messages__pb2.TelemetryLogEvent.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Slf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/Slf',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            messages__pb2.InstanceId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DelayedCast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/DelayedCast',
            messages__pb2.DelayedEventData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Sync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edgeless_api.GuestAPIHost/Sync',
            messages__pb2.SyncData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
